#!/usr/bin/env python3

import argparse
import asyncio
import json
import logging
import sys

from yarl import URL

from gql import Client, __version__, gql
from gql.transport.aiohttp import AIOHTTPTransport
from gql.transport.websockets import WebsocketsTransport

parser = argparse.ArgumentParser(
    description="Send GraphQL queries from command line using http(s) or websockets"
)
parser.add_argument(
    "server", help="the server url starting with http://, https://, ws:// or wss://"
)
parser.add_argument(
    "-p", "--params", nargs="*", help="query parameters in the form param:json_value"
)
parser.add_argument("--version", action="version", version=f"v{__version__}")
group = parser.add_mutually_exclusive_group()
group.add_argument(
    "-d",
    "--debug",
    help="print lots of debugging statements",
    action="store_const",
    dest="loglevel",
    const=logging.DEBUG,
    default=logging.WARNING,
)
group.add_argument(
    "-v",
    "--verbose",
    help="show low level messages",
    action="store_const",
    dest="loglevel",
    const=logging.INFO,
)
parser.add_argument(
    "-o", "--operation-name", help="set the operation_name value", dest="operation_name"
)

args = parser.parse_args()

logging.basicConfig(level=args.loglevel)


async def main():

    # Parse the params argument
    params = {}
    if args.params is not None:
        for p in args.params:

            try:
                # Split only the first colon (throw a ValueError if no colon is present)
                param_key, param_json_value = p.split(":", 1)

                # Extract the json value, trying with double quotes if it does not work
                try:
                    param_value = json.loads(param_json_value)
                except json.JSONDecodeError:
                    try:
                        param_value = json.loads(f'"{param_json_value}"')
                    except json.JSONDecodeError:
                        raise ValueError

                # Save the value in the params dict
                params[param_key] = param_value

            except ValueError:
                print(f"Invalid parameter: {p}", file=sys.stderr)
                return 1

    url = URL(args.server)

    scheme = url.scheme

    if scheme in ["ws", "wss"]:
        transport = WebsocketsTransport(url=args.server, ssl=(scheme == "wss"))
    elif scheme in ["http", "https"]:
        transport = AIOHTTPTransport(url=args.server)
    else:
        raise ValueError("URL protocol should be one of: http, https, ws, wss")

    async with Client(transport=transport) as session:

        while True:
            try:
                query_str = input()
            except EOFError:
                break

            query = gql(query_str)

            extra_params = {}

            if args.params is not None:
                extra_params["variable_values"] = params

            if args.operation_name is not None:
                extra_params["operation_name"] = args.operation_name

            if scheme in ["ws", "wss"]:
                async for result in session.subscribe(query, **extra_params):
                    print(result)
            else:
                result = await session.execute(query, **extra_params)
                print(result)


asyncio.run(main())
