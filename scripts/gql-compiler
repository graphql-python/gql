#!/usr/bin/env python3
import argparse
import glob
import os
from graphql import GraphQLSchema, build_ast_schema
from graphql.language.parser import parse

from gql.compiler.cli import run


def compile_schema_library(schema_library: str) -> GraphQLSchema:
    full_schema = ""
    schema_filepaths = glob.glob(
        os.path.join(schema_library, "**/*.graphql"), recursive=True
    )
    for schema_filepath in schema_filepaths:
        with open(schema_filepath) as schema_file:
            full_schema = full_schema + schema_file.read()
    return build_ast_schema(parse(full_schema))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "schema_library", help="the graphql schemas storage path", type=str
    )
    parser.add_argument(
        "graphql_library", help="path where all queries files are stored", type=str
    )
    parser.add_argument(
        "--config_path", help="path where custom scalars are configured", type=str
    )
    parser.add_argument(
        "--verify", help="verify compiled files against schema", action="store_true"
    )
    parser.add_argument(
        "--allow-deprecated", help="Allow graphql queries to use deprecated fields", action="store_true"
    )
    args = parser.parse_args()
    schema = compile_schema_library(args.schema_library)
    run(schema, args.graphql_library, args.verify, args.allow_deprecated, args.config_path)
